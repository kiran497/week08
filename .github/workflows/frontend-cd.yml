name: CD â€“ Deploy Frontend to AKS

on:
  push:
    branches: [main]
    paths:
      - "frontend/**"
      - "k8s/**"
      - ".github/workflows/frontend-cd.yml"

concurrency:
  group: frontend-cd-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  id-token: write
  deployments: write

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}
  K8S_NAMESPACE: ${{ secrets.K8S_NAMESPACE || vars.K8S_NAMESPACE || 'default' }}

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR login
        run: |
          REG_NAME=$(echo "${{ env.ACR_LOGIN_SERVER }}" | cut -d. -f1)
          az acr login --name "$REG_NAME"

      - name: Build frontend image
        run: |
          docker build -t $ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }} frontend

      - name: Push frontend image
        run: |
          docker push $ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ vars.AKS_RESOURCE_GROUP }}
          cluster-name:  ${{ vars.AKS_CLUSTER_NAME }}

      - name: Update deployment to new image
        run: |
          NS="${{ env.K8S_NAMESPACE }}"
          kubectl -n "$NS" set image deployment/frontend frontend=$ACR_LOGIN_SERVER/frontend:${{ env.IMAGE_TAG }}

      - name: Wait for rollout
        run: |
          NS="${{ env.K8S_NAMESPACE }}"
          kubectl -n "$NS" rollout status deployment/frontend --timeout=180s

      - name: Show cluster state
        if: always()
        run: kubectl -n "${{ env.K8S_NAMESPACE }}" get deploy,po,svc -o wide

      - name: Azure logout
        if: always()
        run: az logout
