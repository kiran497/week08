name: reusable-ci

on:
  workflow_call:
    inputs:
      working-directory:
        required: true
        type: string
      node-version:
        type: string
        default: '20'
      run-tests:
        type: boolean
        default: true
      build-docker:
        type: boolean
        default: false
      image-name:
        type: string
        default: ''
      docker-tag:
        type: string
        default: ''

jobs:
  ci:
    name: CI - ${{ inputs.working-directory }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    steps:
      - uses: actions/checkout@v4

      - name: Detect package.json
        id: detect
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -f package.json ]; then echo "has_pkg=true" >> $GITHUB_OUTPUT; else echo "has_pkg=false" >> $GITHUB_OUTPUT; fi

      - if: steps.detect.outputs.has_pkg == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node-version }}
          cache: npm
          cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json

      - if: steps.detect.outputs.has_pkg == 'true'
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm install; fi

      - if: steps.detect.outputs.has_pkg == 'true'
        working-directory: ${{ inputs.working-directory }}
        run: npm run lint --if-present

      - if: steps.detect.outputs.has_pkg == 'true' && inputs.run-tests
        working-directory: ${{ inputs.working-directory }}
        run: npm test --if-present -- --ci

  docker:
    name: Docker build/publish - ${{ inputs.image-name }}
    if: inputs.build-docker
    needs: ci
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Verify Dockerfile is present
        run: |
          echo "Expecting: ${{ inputs.working-directory }}/Dockerfile"
          ls -la "${{ inputs.working-directory }}"
          test -f "${{ inputs.working-directory }}/Dockerfile"

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          registry: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build & push
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.working-directory }}
          file: ${{ inputs.working-directory }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.ACR_LOGIN_SERVER }}/week08/${{ inputs.image-name }}:${{ inputs.docker-tag || github.ref_name }}
            ${{ secrets.ACR_LOGIN_SERVER }}/week08/${{ inputs.image-name }}:sha-${{ github.sha }}
